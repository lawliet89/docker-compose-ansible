---
# There are several bugs related to the `copy` and `synchronize` modules
# Firstly, `copy` does not preserve file permissions, and executeable scripts like `docker-entrypoint.sh`
# will fail to execute with docker, leading to failure
# See https://github.com/ansible/ansible/issues/14686 and https://github.com/ansible/ansible-modules-core/issues/1124
# Secondly, there is a bug with vagrant and the synchronize modules
# See https://github.com/ansible/ansible/pull/15993
# - name: "Copy files from local {{ local_path }}"
#   copy:
#     dest: "{{ project_directory }}"
#     follow: yes
#     src: "{{ local_path }}/"
#   when: code_source == 'local'

- name: Get temporary file
  local_action: shell mktemp
  register: temp_file

- name: "Gzip to {{ temp_file.stdout }}"
  shell: "tar -pczf {{ temp_file.stdout | quote }} *"
  args:
    chdir: "{{ local_path }}"
    warn: False
  delegate_to: localhost

- name: "List top level files in {{ project_directory }}"
  find:
    paths: "{{ project_directory }}"
    patterns: "*"
    recurse: no
    file_type: file
  register: find_result

- name: Map top level files
  set_fact:
    project_directory_files: "{{ find_result.files | map(attribute='path') | list }}"
  when: code_source == 'local'

- name: "Clear top level files in {{ project_directory }}"
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ project_directory_files }}"
  become: "{{ docker_become }}"

- name: "List top level directories in {{ project_directory }}"
  find:
    paths: "{{ project_directory }}"
    patterns: "*"
    recurse: no
    file_type: directory
  register: find_result

- name: Map top level directories
  set_fact:
    project_directory_directories: "{{ find_result.files | map(attribute='path') | list }}"

- name: "Clear top level directories in {{ project_directory }}"
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ project_directory_directories }}"
  become: "{{ docker_become }}"

- name: "Untar to {{ project_directory }}"
  unarchive:
    extra_opts: [-p]
    src: "{{ temp_file.stdout }}"
    dest: "{{ project_directory }}"

- name: "Delete temporary archive {{ temp_file.stdout }}"
  file:
    path: "{{ temp_file.stdout }}"
    state: absent
  delegate_to: localhost
